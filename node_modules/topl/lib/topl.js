// Generated by CoffeeScript 1.4.0
/* PUBLIC
*/

var createArray, createArrayValue, createGroup, createObject, createPrimitive, parse, stripComments, stripWhitespace, trimWhitespace,
  _this = this;

parse = function(data) {
  var i, key, line, lines, object, stripped, trimmed, value, _i, _len;
  _this.parsed = {};
  lines = data.toString().replace(/\r\n/g, "\n").split("\n");
  for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
    line = lines[i];
    _this.currentLine = i + 1;
    object = null;
    stripped = stripComments(line);
    trimmed = trimWhitespace(stripped);
    if (trimmed === '') {

    } else if (/^\[(.*)\]$/i.test(trimmed)) {
      createGroup(trimmed);
    } else if (/\[$/.test(trimmed)) {
      _this.currentArray = trimmed;
    } else if (/^\]$/.test(trimmed)) {
      _this.currentArray += trimmed;
      object = createObject(_this.currentArray);
      _this.currentArray = null;
    } else {
      if (_this.currentArray != null) {
        _this.currentArray += trimmed;
      } else {
        object = createObject(trimmed);
      }
    }
    if (object != null) {
      for (key in object) {
        value = object[key];
        if (_this.currentGroup != null) {
          _this.currentGroup[key] = value;
        } else {
          _this.parsed[key] = value;
        }
      }
    }
  }
  return _this.parsed;
};

/* PRIVATE
*/


stripComments = function(text) {
  return text.split("#")[0];
};

stripWhitespace = function(text) {
  return text.replace(/\s/g, '');
};

trimWhitespace = function(text) {
  return text.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
};

createGroup = function(string) {
  var group, groupArray, groupString, i, ref, _i, _len, _results;
  _this.currentGroup = null;
  groupString = string.substring(1, string.length - 1);
  groupArray = groupString.split('.');
  ref = _this.parsed;
  _results = [];
  for (i = _i = 0, _len = groupArray.length; _i < _len; i = ++_i) {
    group = groupArray[i];
    if (!(ref[group] != null)) {
      ref[group] = {};
    } else {
      if (i === groupArray.length - 1) {
        throw new Error("Check your groups and keys! You\'re attempting an overwrite on line " + _this.currentLine + "!");
      }
    }
    ref = ref[group];
    if (i === groupArray.length - 1) {
      _results.push(_this.currentGroup = ref);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

createObject = function(text) {
  var key, object, value, valueString, values;
  values = text.split('=');
  key = stripWhitespace(values[0]);
  valueString = trimWhitespace(values[1]);
  if (/^\[(.*)\]$/i.test(valueString)) {
    value = createArray(valueString, 1).array;
  } else {
    value = createPrimitive(valueString).value;
  }
  if (value != null) {
    object = {};
    object[key] = value;
    return object;
  } else {
    return null;
  }
};

createArray = function(text, location) {
  var array, newArray, newValue, type;
  array = [];
  while (location < text.length) {
    if (text.charAt(location) === ' ' || text.charAt(location) === ',' || text.charAt(location) === ']') {
      location++;
      if (text.charAt(location) === ',' || text.charAt(location) === ']') {
        break;
      }
    } else if (text.charAt(location) === '[') {
      newArray = createArray(text, location + 1);
      array.push(newArray.array);
      location = newArray.location;
    } else {
      newValue = createArrayValue(text, location);
      if (!(typeof type !== "undefined" && type !== null)) {
        type = newValue.value.type;
      } else {
        if (newValue.value.type !== type) {
          throw new Error('Check your arrays! They have to be all the same type!');
        }
      }
      array.push(newValue.value.value);
      location = newValue.location;
    }
  }
  return {
    array: array,
    location: location
  };
};

createArrayValue = function(text, location) {
  var value;
  value = '';
  while (location < text.length) {
    if (text.charAt(location) === ',' || text.charAt(location) === ']') {
      if (text.charAt(location) === ',') {
        location++;
      }
      break;
    } else {
      value += text.charAt(location);
      location++;
    }
  }
  value = createPrimitive(value);
  return {
    value: value,
    location: location
  };
};

createPrimitive = function(text) {
  var char, i, primitive, string, _i, _len;
  text = trimWhitespace(text);
  primitive = {};
  if (/^\"(.*)\"$/i.test(text)) {
    primitive.type = 'string';
    string = text.substring(1, text.length - 1);
    for (i = _i = 0, _len = string.length; _i < _len; i = ++_i) {
      char = string[i];
      if (char === '\\') {
        if (string.charAt(i - 1) !== '\\') {
          if (string.charAt(i + 1) !== '0' && string.charAt(i + 1) !== 't' && string.charAt(i + 1) !== 'n' && string.charAt(i + 1) !== 'r' && string.charAt(i + 1) !== '"' && string.charAt(i + 1) !== '\\') {
            throw new Error('Check your stings! Escape any forward slashes!');
          }
        }
      } else if (char === '"') {
        if (string.charAt(i - 1) !== '\\') {
          throw new Error('Check your stings! Escape any double quotes!');
        }
      }
    }
    primitive.value = string;
    return primitive;
  } else if (/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$/.test(text)) {
    primitive.type = 'date';
    primitive.value = new Date(text);
    return primitive;
  } else if (text === 'true') {
    primitive.type = 'boolean';
    primitive.value = true;
    return primitive;
  } else if (text === 'false') {
    primitive.type = 'boolean';
    primitive.value = false;
    return primitive;
  } else if (/^-?\d+$/.test(text)) {
    primitive.type = 'integer';
    primitive.value = parseInt(text);
    return primitive;
  } else if (/^-?\d+\.?\d+$/.test(text || /^-?\.?\d+$/.test(text))) {
    primitive.type = 'float';
    primitive.value = parseFloat(text);
    return primitive;
  } else {
    throw new Error("Something is wrong on line " + _this.currentLine);
  }
};

module.exports.parse = parse;
